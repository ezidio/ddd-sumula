/**
 * This file was generated by the Jeddict
 */ 

package br.com.tdc.sumula.tradicional.model;

import br.com.tdc.sumula.tradicional.type.TempoDeJogo;
import br.com.tdc.sumula.tradicional.type.TipoGol;
import com.sun.org.apache.bcel.internal.generic.InstructionComparator;
import org.apache.commons.lang3.Validate;

import javax.persistence.Basic;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;

import static org.apache.commons.lang3.Validate.isTrue;

/**
 * Informações do Gol
 */

@Entity
public class Gol { 

    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    private Long id;

    @Basic
    @Enumerated(EnumType.STRING)
    private TipoGol tipo;

    @Embedded
    private TempoDeJogo tempo;

    @ManyToOne(targetEntity = Relacionado.class)
    private Relacionado relacionado;

    @ManyToOne(targetEntity = Time.class)
    private Time favorecido;

    protected Gol() {
        // Construtor vazio para serialização
    }

    public Time getTime() {
        return relacionado.getTime();
    }

    public boolean favorecidoA(Time time) {
        return this.favorecido.equals(time);
    }

    public static Gol contra(TempoDeJogo tempo, Relacionado jogador, Time favorecido) {
        isTrue(!jogador.getTime().equals(favorecido), "Gol contra não pode ser favorecido ao time do jogador.");
        Gol gol = new Gol();
        gol.favorecido = favorecido;
        gol.tempo = tempo;
        gol.relacionado = jogador;
        gol.tipo = TipoGol.CONTRA;
        return gol;
    }

    public static Gol normal(TempoDeJogo tempo, Relacionado jogador) {
        Gol gol = new Gol();
        gol.favorecido = jogador.getTime();
        gol.tempo = tempo;
        gol.relacionado = jogador;
        gol.tipo = TipoGol.NORMAL;
        return gol;
    }

    public static Gol falta(TempoDeJogo tempo, Relacionado jogador) {
        Gol gol = new Gol();
        gol.favorecido = jogador.getTime();
        gol.tempo = tempo;
        gol.relacionado = jogador;
        gol.tipo = TipoGol.FALTA;
        return gol;
    }

    public TempoDeJogo getTempo() {
        return tempo;
    }

    public Relacionado getRelacionado() {
        return relacionado;
    }

    public TipoGol getTipo() {
        return tipo;
    }

    public Time getFavorecido() {
        return favorecido;
    }
}
