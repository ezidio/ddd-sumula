/**
 * This file was generated by the Jeddict
 */ 

package br.com.tdc.sumula.tradicional.model;

import br.com.tdc.sumula.tradicional.type.TipoRelacao;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import javax.naming.OperationNotSupportedException;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import static org.apache.commons.lang3.Validate.isTrue;
import static org.apache.commons.lang3.Validate.notNull;

/**
 * @author everton
 */

@Entity
public class Escalacao { 

    @ManyToOne(targetEntity = Time.class)
    private Time time;

    @OneToMany(targetEntity = Relacionado.class)
    private List<Relacionado> relacionados;

    private Escalacao(Builder builder) {
        notNull(builder.time, "O time deve ser especificado.");
        isTrue(builder.relacionados.stream().filter(Relacionado::isTitular).count() == 11, "São necessários 11 titulares para confirmar a escalação");
        isTrue(builder.relacionados.stream().map(Relacionado::getTime).allMatch(builder.time::equals), "A escalação deve conter somente jogadores do(a) "+builder.time.getNome());

        time = builder.time;
        relacionados = builder.relacionados;
    }

    public Time getTime() {
        return time;
    }

    public List<Relacionado> getRelacionados() {
        return relacionados;
    }

    public static Builder newBuilder() {
        return new Builder();
    }

    public List<Relacionado> getTitulares() {
        return this.relacionados.stream()
                .filter(Relacionado::isTitular)
                .collect(Collectors.toList());
    }

    public List<Relacionado> getReservas() {
        return this.relacionados.stream()
                .filter(Relacionado::isReserva)
                .collect(Collectors.toList());
    }

    public Optional<Relacionado> getRelacionadoPorNumero(int relacionado) {
        return this.relacionados.stream()
                .filter(r -> r.getNumero() == relacionado)
                .findFirst();
    }

    public boolean contem(Relacionado relacionado) {
        return this.relacionados.contains(relacionado);
    }


    public static final class Builder {
        private Time time;
        private List<Relacionado> relacionados = new ArrayList<>();

        private Builder() {
        }

        public Builder withTime(Time val) {
            time = val;
            return this;
        }

        public Builder addTitular(Integer numero, Jogador jogador) {
            return this.addRelacionado(Relacionado.titular(numero, jogador));
        }

        public Builder addReserva(Integer numero, Jogador jogador) {
            return this.addRelacionado(Relacionado.reserva(numero, jogador));
        }

        public Builder addRelacionado(Relacionado val) {
            relacionados.add(val);
            return this;
        }

        public Escalacao build() {
            return new Escalacao(this);
        }
    }

    /**
     * Não é relevante para o dominio da aplicação.
     * Necessário para o hibernate trabalhar.
     */
    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    private Long id;
}
