/**
 * This file was generated by the Jeddict
 */

package br.com.everton.sumula.model.jogador;

import br.com.everton.sumula.model.type.TipoJogador;
import br.com.everton.sumula.infrastructure.types.InscricaoCBFType;
import br.com.everton.sumula.model.Time;
import org.apache.commons.lang3.Validate;
import org.hibernate.annotations.TypeDef;

import javax.persistence.*;
import java.io.Serializable;

/**
 * @author everton
 */
@TypeDef(
        name = "inscricaoCBF",
        defaultForType = InscricaoCBF.class,
        typeClass = InscricaoCBFType.class
)
@Entity
public class Jogador implements Serializable {

    @Id
    private InscricaoCBF cbf;

    private String nome;

    @ManyToOne
    @JoinColumn(name = "id_time")
    private Time time;

    private String apelido;

    @Enumerated(EnumType.STRING)
    private TipoJogador tipo;

    private Jogador(Builder builder) {
        this.cbf = Validate.notNull(builder.cbf);
        this.nome = Validate.notEmpty(builder.nome);
        this.time = builder.time;
        apelido = builder.apelido;
        tipo = builder.tipo;
    }

    protected Jogador() {
        // Construtor vazio para serialização
    }

    public static Builder newBuilder() {
        return new Builder();
    }

    public InscricaoCBF getCbf() {
        return this.cbf;
    }

    public Time getTime() {
        return time;
    }

    public String getNome() {
        return this.nome;
    }

    public String getApelido() {
        return this.apelido;
    }

    public TipoJogador getTipo() {
        return this.tipo;
    }


    public static final class Builder {
        private InscricaoCBF cbf;
        private String nome;
        private Time time;
        private String apelido;
        private TipoJogador tipo;

        private Builder() {
        }

        public Builder withCbf(InscricaoCBF val) {
            cbf = val;
            return this;
        }

        public Builder withNome(String val) {
            nome = val;
            return this;
        }

        public Builder withTime(Time val) {
            time = val;
            return this;
        }

        public Builder withApelido(String val) {
            apelido = val;
            return this;
        }

        public Builder withTipo(TipoJogador val) {
            tipo = val;
            return this;
        }

        public Jogador build() {
            return new Jogador(this);
        }
    }
}
